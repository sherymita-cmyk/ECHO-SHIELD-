"use client";

import React, { useState, useEffect } from 'react';
import { EmergencyContact } from '@/entities/EmergencyContact';
import { useToast } from '@/components/ui/use-toast';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Plus, User, Mail, Phone, Trash2, Edit, UserPlus, AlertCircle } from 'lucide-react';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog";
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';

export default function ContactsPage() {
  const { toast } = useToast();
  const [contacts, setContacts] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [isFormOpen, setIsFormOpen] = useState(false);
  const [editingContact, setEditingContact] = useState<any>(null);

  const [formData, setFormData] = useState({ name: '', email: '', phone: '' });

  useEffect(() => {
    loadContacts();
  }, []);

  const loadContacts = async () => {
    setLoading(true);
    try {
      const data = await EmergencyContact.list("createdAt:desc");
      setContacts(data);
    } catch (error) {
      toast({ title: "Error", description: "Failed to load contacts.", variant: "destructive" });
    } finally {
      setLoading(false);
    }
  };

  const handleFormChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { id, value } = e.target;
    setFormData(prev => ({ ...prev, [id]: value }));
  };

  const handleOpenForm = (contact: any | null) => {
    setEditingContact(contact);
    if (contact) {
      setFormData({ name: contact.name, email: contact.email, phone: contact.phone || '' });
    } else {
      setFormData({ name: '', email: '', phone: '' });
    }
    setIsFormOpen(true);
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      if (editingContact) {
        const updatedContact = await EmergencyContact.update(editingContact.id, formData);
        setContacts(contacts.map(c => c.id === editingContact.id ? { ...c, ...formData } : c));
        toast({ title: "Success", description: "Contact updated successfully." });
      } else {
        const newContact = await EmergencyContact.create(formData);
        setContacts([newContact, ...contacts]);
        toast({ title: "Success", description: "Contact added successfully." });
      }
      setIsFormOpen(false);
    } catch (error) {
      toast({ title: "Error", description: "Failed to save contact.", variant: "destructive" });
    }
  };

  const handleDelete = async (id: string) => {
    try {
      await EmergencyContact.delete(id);
      setContacts(contacts.filter(c => c.id !== id));
      toast({ title: "Success", description: "Contact deleted successfully." });
    } catch (error) {
      toast({ title: "Error", description: "Failed to delete contact.", variant: "destructive" });
    }
  };

  return (
    <div className="space-y-6 pb-16">
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <div>
          <h1 className="text-3xl font-bold text-white">Emergency Contacts</h1>
          <p className="text-slate-400 mt-1">Manage the people who will be notified in an emergency.</p>
        </div>
        <Button onClick={() => handleOpenForm(null)} className="bg-red-600 hover:bg-red-700 text-white">
          <Plus className="h-4 w-4 mr-2" />
          Add Contact
        </Button>
      </div>

      {loading ? (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {[...Array(3)].map((_, i) => (
            <Card key={i} className="bg-slate-800/50 border-slate-700">
              <CardContent className="p-6 space-y-3">
                <div className="h-6 bg-slate-700 rounded w-3/4 pulse-loader"></div>
                <div className="h-4 bg-slate-700 rounded w-full pulse-loader"></div>
                <div className="h-4 bg-slate-700 rounded w-1/2 pulse-loader"></div>
              </CardContent>
            </Card>
          ))}
        </div>
      ) : contacts.length === 0 ? (
        <Card className="bg-slate-800/50 border-slate-700 text-center py-16">
          <CardContent>
            <AlertCircle className="h-12 w-12 text-slate-500 mx-auto mb-4" />
            <h3 className="text-xl font-semibold text-white">No Contacts Yet</h3>
            <p className="text-slate-400 mt-2">Add your first emergency contact to get started.</p>
          </CardContent>
        </Card>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {contacts.map(contact => (
            <Card key={contact.id} className="bg-slate-800/50 border-slate-700 flex flex-col">
              <CardHeader>
                <CardTitle className="flex items-center gap-3 text-white">
                  <User className="h-5 w-5" />
                  {contact.name}
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-3 flex-grow">
                <div className="flex items-center gap-3 text-slate-300">
                  <Mail className="h-4 w-4" />
                  <span>{contact.email}</span>
                </div>
                {contact.phone && (
                  <div className="flex items-center gap-3 text-slate-300">
                    <Phone className="h-4 w-4" />
                    <span>{contact.phone}</span>
                  </div>
                )}
              </CardContent>
              <div className="p-4 pt-0 flex justify-end gap-2">
                <Button variant="ghost" size="icon" onClick={() => handleOpenForm(contact)}>
                  <Edit className="h-4 w-4" />
                </Button>
                <AlertDialog>
                  <AlertDialogTrigger asChild>
                    <Button variant="ghost" size="icon" className="text-red-500 hover:text-red-400 hover:bg-red-900/20">
                      <Trash2 className="h-4 w-4" />
                    </Button>
                  </AlertDialogTrigger>
                  <AlertDialogContent className="bg-slate-800 border-slate-700 text-white">
                    <AlertDialogHeader>
                      <AlertDialogTitle>Delete Contact?</AlertDialogTitle>
                      <AlertDialogDescription className="text-slate-400">
                        Are you sure you want to delete {contact.name}? This action cannot be undone.
                      </AlertDialogDescription>
                    </AlertDialogHeader>
                    <AlertDialogFooter>
                      <AlertDialogCancel className="bg-slate-700 border-slate-600 hover:bg-slate-600">Cancel</AlertDialogCancel>
                      <AlertDialogAction onClick={() => handleDelete(contact.id)} className="bg-red-600 hover:bg-red-700">Delete</AlertDialogAction>
                    </AlertDialogFooter>
                  </AlertDialogContent>
                </AlertDialog>
              </div>
            </Card>
          ))}
        </div>
      )}

      <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>
        <DialogContent className="bg-slate-800 border-slate-700 text-white">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <UserPlus className="h-5 w-5" />
              {editingContact ? 'Edit Contact' : 'Add New Contact'}
            </DialogTitle>
            <DialogDescription className="text-slate-400">
              This person will be notified in case of an emergency.
            </DialogDescription>
          </DialogHeader>
          <form onSubmit={handleSubmit} className="space-y-4 py-4">
            <div className="space-y-2">
              <Label htmlFor="name">Full Name</Label>
              <Input id="name" value={formData.name} onChange={handleFormChange} required className="bg-slate-700 border-slate-600" />
            </div>
            <div className="space-y-2">
              <Label htmlFor="email">Email Address</Label>
              <Input id="email" type="email" value={formData.email} onChange={handleFormChange} required className="bg-slate-700 border-slate-600" />
            </div>
            <div className="space-y-2">
              <Label htmlFor="phone">Phone Number (Optional)</Label>
              <Input id="phone" type="tel" value={formData.phone} onChange={handleFormChange} className="bg-slate-700 border-slate-600" />
            </div>
            <DialogFooter>
              <Button type="submit" className="bg-red-600 hover:bg-red-700 text-white">
                {editingContact ? 'Save Changes' : 'Add Contact'}
              </Button>
            </DialogFooter>
          </form>
        </DialogContent>
      </Dialog>
    </div>
  );
}
