"use client";

import React, { useState, useEffect, useRef, useCallback } from 'react';
import { EmergencyContact } from '@/entities/EmergencyContact';
import { SOSAlert } from '@/entities/SOSAlert';
import { SendEmail } from '@/integrations/Core';
import { useToast } from '@/components/ui/use-toast';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Mic, Video, Zap, ShieldCheck, AlertTriangle, Volume2 } from 'lucide-react';
import { useRouter } from 'next/navigation';
import { createPageUrl } from '@/utils';

type GeoCoordinates = {
  latitude: number;
  longitude: number;
  altitude?: number | null;
  accuracy: number;
  altitudeAccuracy?: number | null;
  heading?: number | null;
  speed?: number | null;
};

// Simple shake detection
const SHAKE_THRESHOLD = 25;
let last_x: number | null, last_y: number | null, last_z: number | null;
let lastUpdate = 0;

export default function HomePage() {
  const { toast } = useToast();
  const router = useRouter();
  const [sosState, setSosState] = useState<'idle' | 'sending' | 'sent' | 'recording'>('idle');
  const [isListening, setIsListening] = useState(false);
  const [isRecording, setIsRecording] = useState(false);
  const [batteryLevel, setBatteryLevel] = useState(100);
  const [lowBatteryAlertSent, setLowBatteryAlertSent] = useState(false);
  const videoRef = useRef<HTMLVideoElement>(null);
  const mediaRecorderRef = useRef<MediaRecorder | null>(null);
  const recognitionRef = useRef<any>(null);

  const getContacts = async () => {
    try {
      const contacts = await EmergencyContact.list();
      if (contacts.length === 0) {
        toast({
          title: "No Contacts Found",
          description: "Please add emergency contacts before sending an SOS.",
          variant: "destructive",
        });
        router.push(createPageUrl('Contacts'));
        return null;
      }
      return contacts;
    } catch (error) {
      toast({ title: "Error", description: "Could not fetch contacts.", variant: "destructive" });
      return null;
    }
  };

  const getLocation = (): Promise<GeoCoordinates> => {
    return new Promise((resolve, reject) => {
      if (!navigator.geolocation) {
        reject(new Error("Geolocation is not supported by your browser."));
      } else {
        navigator.geolocation.getCurrentPosition(
          (position) => resolve(position.coords),
          (error) => reject(error)
        );
      }
    });
  };

  const startVideoRecording = async () => {
    setSosState('recording');
    setIsRecording(true);
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ video: { facingMode: 'environment' }, audio: true });
      if (videoRef.current) {
        videoRef.current.srcObject = stream;
      }
      mediaRecorderRef.current = new MediaRecorder(stream);
      mediaRecorderRef.current.start();
      toast({ title: "Recording Started", description: "Video and audio recording is active." });
    } catch (error) {
      console.error("Error starting recording:", error);
      toast({ title: "Recording Error", description: "Could not start video recording.", variant: "destructive" });
      setSosState('sent');
      setIsRecording(false);
    }
  };

  const triggerSOS = useCallback(async (method: 'button' | 'voice' | 'shake' | 'low_battery') => {
    if (sosState !== 'idle') return;

    setSosState('sending');
    toast({ title: "SOS Triggered!", description: "Sending alerts to your emergency contacts..." });

    try {
      const [contacts, location] = await Promise.all([getContacts(), getLocation()]);
      if (!contacts || !location) {
        setSosState('idle');
        return;
      }

      const { latitude, longitude } = location;
      const locationUrl = `https://www.google.com/maps?q=${latitude},${longitude}`;
      const subject = "EMERGENCY SOS ALERT";
      const body = `This is an emergency alert. My current location is: ${locationUrl}. Please send help immediately.`;

      await Promise.all(contacts.map(contact => SendEmail({ to: contact.email, subject, body })));
      
      await SOSAlert.create({
        triggeredAt: new Date().toISOString(),
        triggerMethod: method,
        location: { latitude, longitude },
        contactsNotified: contacts.map(c => c.email),
      });

      setSosState('sent');
      toast({ title: "Alerts Sent", description: "Emergency contacts have been notified." });

      setTimeout(startVideoRecording, 3000);

    } catch (error) {
      console.error("SOS Error:", error);
      toast({ title: "SOS Failed", description: "Could not send alerts. Please try again.", variant: "destructive" });
      setSosState('idle');
    }
  }, [sosState, toast, router]);

  // Voice Recognition Setup
  useEffect(() => {
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    if (!SpeechRecognition) {
      console.warn("Speech recognition not supported.");
      return;
    }
    recognitionRef.current = new SpeechRecognition();
    recognitionRef.current.continuous = true;
    recognitionRef.current.interimResults = false;
    recognitionRef.current.lang = 'en-US';

    recognitionRef.current.onresult = (event: any) => {
      const transcript = event.results[event.results.length - 1][0].transcript.trim().toLowerCase();
      if (transcript.includes("help me") || transcript.includes("sos")) {
        triggerSOS('voice');
      }
    };

    recognitionRef.current.onerror = (event: any) => {
      console.error('Speech recognition error', event.error);
      setIsListening(false);
    };
    
    recognitionRef.current.onend = () => {
      if (isListening) {
        // Restart listening if it was supposed to be on
        recognitionRef.current.start();
      }
    };

    return () => {
      if (recognitionRef.current) {
        recognitionRef.current.stop();
      }
    };
  }, [triggerSOS, isListening]);

  const toggleListening = () => {
    if (isListening) {
      recognitionRef.current?.stop();
      setIsListening(false);
      toast({ title: "Voice Recognition Off" });
    } else {
      recognitionRef.current?.start();
      setIsListening(true);
      toast({ title: "Voice Recognition On", description: "Say 'Help Me' or 'SOS' to trigger an alert." });
    }
  };

  // Shake Detection
  useEffect(() => {
    const handleMotion = (event: DeviceMotionEvent) => {
      const { acceleration } = event;
      const curTime = new Date().getTime();

      if ((curTime - lastUpdate) > 100) {
        const diffTime = curTime - lastUpdate;
        lastUpdate = curTime;

        if (acceleration && last_x !== null && last_y !== null && last_z !== null) {
          const speed = Math.abs(acceleration.x! + acceleration.y! + acceleration.z! - last_x - last_y - last_z) / diffTime * 10000;
          if (speed > SHAKE_THRESHOLD) {
            triggerSOS('shake');
          }
        }
        last_x = acceleration?.x || 0;
        last_y = acceleration?.y || 0;
        last_z = acceleration?.z || 0;
      }
    };

    window.addEventListener('devicemotion', handleMotion);
    return () => window.removeEventListener('devicemotion', handleMotion);
  }, [triggerSOS]);

  // Battery Monitoring
  useEffect(() => {
    const monitorBattery = async () => {
      try {
        const battery = await (navigator as any).getBattery();
        const updateBatteryStatus = () => {
          setBatteryLevel(Math.round(battery.level * 100));
          if (battery.level <= 0.03 && !battery.charging && !lowBatteryAlertSent) {
            setLowBatteryAlertSent(true);
            triggerSOS('low_battery');
          }
        };
        updateBatteryStatus();
        battery.addEventListener('levelchange', updateBatteryStatus);
        battery.addEventListener('chargingchange', updateBatteryStatus);
        return () => {
          battery.removeEventListener('levelchange', updateBatteryStatus);
          battery.removeEventListener('chargingchange', updateBatteryStatus);
        };
      } catch (error) {
        console.warn("Battery Status API not supported.");
      }
    };
    monitorBattery();
  }, [lowBatteryAlertSent, triggerSOS]);

  return (
    <div className="flex flex-col items-center justify-center gap-8 pb-16">
      {isRecording && (
        <Card className="w-full max-w-2xl bg-black border-red-500 border-2 shadow-lg shadow-red-500/30">
          <CardHeader>
            <CardTitle className="flex items-center gap-2 text-red-500 animate-pulse">
              <Video className="h-5 w-5" /> LIVE RECORDING
            </CardTitle>
          </CardHeader>
          <CardContent>
            <video ref={videoRef} autoPlay playsInline className="w-full rounded-lg" />
          </CardContent>
        </Card>
      )}

      {!isRecording && (
        <div className="flex flex-col items-center text-center">
          <button
            onClick={() => triggerSOS('button')}
            disabled={sosState !== 'idle'}
            className="relative flex items-center justify-center w-48 h-48 rounded-full bg-slate-800 border-4 border-red-600 shadow-2xl shadow-red-600/20 transition-all duration-300 ease-in-out hover:scale-105 active:scale-95 disabled:opacity-50 disabled:cursor-not-allowed group"
          >
            {sosState === 'idle' && (
              <span className="text-4xl font-bold text-red-500 group-hover:text-red-400 transition-colors">SOS</span>
            )}
            {sosState === 'sending' && (
              <div className="animate-spin rounded-full h-24 w-24 border-t-4 border-b-4 border-red-500"></div>
            )}
            {(sosState === 'sent' || sosState === 'recording') && (
              <ShieldCheck className="h-24 w-24 text-green-500" />
            )}
            <div className="absolute inset-0 rounded-full border-4 border-red-500/50 animate-ping-slow"></div>
          </button>
          <p className="mt-6 text-slate-400 max-w-xs">
            {
              {
                idle: "Press the button or use a trigger to send an emergency alert.",
                sending: "Sending alerts to your contacts...",
                sent: "Alerts sent. Starting recording soon...",
                recording: "Recording in progress."
              }[sosState]
            }
          </p>
        </div>
      )}

      <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 w-full max-w-2xl">
        <Card className="bg-slate-800/50 border-slate-700">
          <CardContent className="p-4 flex items-center justify-between">
            <div className="flex items-center gap-3">
              <Mic className={`h-6 w-6 ${isListening ? 'text-red-500' : 'text-slate-400'}`} />
              <div>
                <h3 className="font-semibold">Voice Command</h3>
                <p className={`text-sm ${isListening ? 'text-red-400' : 'text-slate-500'}`}>
                  {isListening ? "Listening..." : "Inactive"}
                </p>
              </div>
            </div>
            <Button size="sm" variant={isListening ? "destructive" : "secondary"} onClick={toggleListening}>
              {isListening ? "Stop" : "Start"}
            </Button>
          </CardContent>
        </Card>
        <Card className="bg-slate-800/50 border-slate-700">
          <CardContent className="p-4 flex items-center gap-3">
            <Zap className={`h-6 w-6 ${batteryLevel <= 15 ? 'text-red-500' : 'text-green-500'}`} />
            <div>
              <h3 className="font-semibold">Battery Status</h3>
              <p className="text-sm text-slate-400">{batteryLevel}%</p>
            </div>
          </CardContent>
        </Card>
      </div>
      
      <Card className="bg-yellow-900/20 border-yellow-700 w-full max-w-2xl">
        <CardContent className="p-4 flex items-start gap-3">
          <AlertTriangle className="h-6 w-6 text-yellow-500 flex-shrink-0 mt-1" />
          <div>
            <h3 className="font-semibold text-yellow-400">Shake to Activate</h3>
            <p className="text-sm text-yellow-500">
              Vigorously shake your device to trigger an SOS alert. This feature is always active.
            </p>
          </div>
        </CardContent>
      </Card>
      
      <Card className="bg-blue-900/20 border-blue-700 w-full max-w-2xl">
        <CardContent className="p-4 flex items-start gap-3">
          <Volume2 className="h-6 w-6 text-blue-400 flex-shrink-0 mt-1" />
          <div>
            <h3 className="font-semibold text-blue-300">How Voice Commands Work</h3>
            <p className="text-sm text-blue-400">
              After pressing 'Start', say "Help Me" or "SOS" clearly. The app needs to be open in your browser for this to work.
            </p>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
